Dear reader,

this file provides a step-by-step guide to setup and execute an implementation of OGAMUS (Online Grounding of Action Models
in Unknown Situations) with a Linux operative system:

1. If you do not already have conda, install it by downloading and executing the Linux installer
provided at this link: https://docs.conda.io/en/latest/miniconda.html

2. Once conda has been installed, open a bash and create a conda environment
    "conda create -n ogamus"

3. Activate the conda environment
    "conda activate ogamus"

4. Install pip in the conda environment
    "conda install pip"
   If you want to be sure everything is ok, run the command "which pip" to see if "pip" is
   correctly pointing to the binary into the conda environment, you should see something
   like ".../.conda/envs/ogamus/bin/pip".
   If this is not the case, you can run "which -a pip" and, in the following commands, replace "pip" with the full
   path similar to ".../.conda/envs/ogamus/bin/pip".

4. Install PyTorch in the conda environment, the command to run depends on your platform,
   please refer to https://pytorch.org/get-started/locally/
   e.g. If you do not have a gpu, you can install pytorch by running
    "pip install torch==1.9.0+cpu torchvision==0.10.0+cpu torchaudio==0.9.0 -f https://download.pytorch.org/whl/torch_stable.html"

5. Install AI2THOR 4.0.0
    "pip install ai2thor==4.0.0"

6. Install matplotlib
    "pip install matplotlib"

7. Download the code in the zip file "ogamus_code.zip"

8. If not already existing, download the pretrained neural network models available at the anonymous
   link: https://drive.google.com/drive/folders/1UjADpBeBOMUKXQt-qSULIP3vM90zr_MR?usp=sharing, and move all the files
   downloaded from google drive into the source directory "Utils/pretrained_models"

10. Check everything is correctly installed by executing the command: "python main.py"
IMPORTANT NOTE: ai2thor is based on unity, which requires a GUI, if you are running the project on a machine without a GUI,
you have to setup X11 forwarding on your local machine.
e.g. you can connect through ssh and enable forwarding with the following command "ssh -X username@machinename"

If you want to test different task w/o ground truth object detections, there are two options:
    a) -t xxx where xxx is the task you want to test, available tasks are: on, open, close, ogn, ogn_ithor
    b) -obj (or -o), when you pass this option, the agent uses ground truth object detections

    e.g. to run ogamus on the task "on" with ground truth object detections, execute the command: "python main.py -t on -o"

The results are stored in the folder "Results/test_set_X_stepsY", where X is the task name provided as input and Y the number of steps
(which equals 200 for all tasks but object goal navigation in RoboTHOR). One subdirectory is created for each episode.
Each episode subdirectory contains evaluation and log files relative to a single episode.
If you want to generate a summarized evaluation of all episodes in one directory, open the script "Utils/ResultsPlotter.py"
and change the value of the DIR variable (at the beginning of the script) with the path of the results directory you want
to evaluate.
    e.g. after running "python main.py -t on -o", in ResultsPlotter.py set DIR = "Results/test_set_on_steps200" and execute
    the command "python ResultsPlotter.py"
For the object goal navigation task, if you want to generate the additional metric SPL, look at the end of the file
ResultsPlotter.py, comment "generate_plots()" and uncomment "ogn_metrics()", then run the script as above.



Sincerely
Leonardo Lamanna